#!/usr/bin/env python3

# Copyright Â© 2020 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import json
import re
import secrets
import urllib.parse

import websocket

ap = argparse.ArgumentParser()
ap.add_argument('url', metavar='URL')
opt = ap.parse_args()
url = urllib.parse.urlparse(opt.url)
if url.scheme not in {'http', 'https'}:
    ap.error(f'unsupported URL: {opt.url}')
if url.netloc not in {'www.impactaging.com', 'www.aging-us.com'}:
    ap.error(f'unsupported URL: {opt.url}')
path_regexps = [
    r'/papers/v\d+/n\d+/pdf/(?P<pii>\d+)[.]pdf',
    r'/papers/v\d+/n\d+/full/(?P<pii>\d+)[.]html',
    r'/full/(?P<vol>\d+)/(?P<pg>\d+)',
    r'/article/(?P<pii>\d+)/text',
]
for path_regexp in path_regexps:
    path_regexp = re.compile(fr'\A(?:{path_regexp})\Z')
    match = path_regexp.match(url.path)
    if match is not None:
        break
if match is None:
    ap.error(f'unsupported URL: {opt.url}')
urlinfo = match.groupdict()
socket = websocket.WebSocket()
url = f'wss://www.aging-us.com/sockjs/{secrets.randbelow(1000)}/{secrets.token_urlsafe(8)}/websocket'
socket.connect(url)
def send_msg(**data):
    csep = (',', ':')
    msg = json.dumps(data, separators=csep)
    msg = json.dumps([msg], separators=csep)
    return socket.send(msg)
send_msg(msg='connect', version='1', support=['1', 'pre2', 'pre1'])
if 'pii' in urlinfo:
    send_msg(msg='method', method='getArticle', params=[urlinfo['pii']], id='1')
else:
    vol = int(urlinfo['vol'])
    pg = int(urlinfo['pg'])
    send_msg(msg='sub', id='0', name='articleByVolumePage', params=[vol, pg])
while True:
    msg = socket.recv()
    if msg.startswith('a[') and msg.endswith(']'):
        [msg] = json.loads(msg[1:])
        msg = json.loads(msg)
        msgtype = msg.get('msg')
        if msgtype == 'added' and msg['collection'] == 'articles':
            pii = msg['fields']['ids']['pii']
            send_msg(msg='method', method='getArticle', params=[pii], id='1')
        elif msgtype == 'result' and msg['id'] == '1':
            url = msg['result']['article']['files']['pdf']['url']
            print(url)
            break  # yay, done!
        elif msgtype == 'ping':
            raise RuntimeError('unexpected ping')

# vim:ts=4 sts=4 sw=4 et
